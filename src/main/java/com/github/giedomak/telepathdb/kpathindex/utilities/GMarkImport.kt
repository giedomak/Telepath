/**
 * Copyright (C) 2016-2017 - All rights reserved.
 * This file is part of the telepathdb project which is released under the GPLv3 license.
 * See file LICENSE.txt or go to http://www.gnu.org/licenses/gpl.txt for full license details.
 * You may use, distribute and modify this code under the terms of the GPLv3 license.
 */

package com.github.giedomak.telepathdb.kpathindex.utilities

import com.github.giedomak.telepathdb.datamodels.graph.Node
import com.github.giedomak.telepathdb.datamodels.graph.Path
import com.github.giedomak.telepathdb.datamodels.stores.PathIdentifierStore
import com.github.giedomak.telepathdb.kpathindex.KPathIndex
import com.github.giedomak.telepathdb.utilities.Logger
import java.io.BufferedReader
import java.io.FileReader
import java.io.IOException

/**
 * Utility to import graphs generated by gMark into the kpathindex.
 *
 * See gMark: https://github.com/graphMark/gmark
 */
object GMarkImport {

    /**
     * Imports a gMark file.
     *
     * Assumes the format of the file resembles: `node_id edge_label node_id` seperated by space.
     * For example: `42 4 6`.
     * Meaning a (directed) edge from node 42 to node 6, with edge label 4.
     */
    @Throws(IOException::class)
    fun run(kPathIndex: KPathIndex, gMarkFile: String): Long {

        Logger.info("Importing: " + gMarkFile)

        var importedLines: Long = 0

        BufferedReader(FileReader(gMarkFile)).use { br ->

            // Let's start with the first line
            var line: String? = br.readLine()

            while (line != null) {
                // Split the line on space
                val split = line.split(" ".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()

                // split[0] is the starting node id
                val startNodeLabel = split[0]
                // split[1] is the edge label
                val edgeLabel = split[1]
                // split[2] is the end node id
                val endNodeLabel = split[2]

                // Put them into a list
                val nodes = listOf(Node(startNodeLabel), Node(endNodeLabel))

                // Get the path identifier from the pathIdentifierStore
                val pathIdentifier = PathIdentifierStore.getPathIdByEdgeLabel(edgeLabel)

                // Insert into the index
                kPathIndex.insert(Path(pathIdentifier, nodes))

                // Yay, we've inserted one
                importedLines++

                // Read the next line
                line = br.readLine()
            }
        }

        // Set K to 1 for the kPathIndex because we only imported paths with 1 edge
        kPathIndex.k = 1

        Logger.info("Imported paths: " + importedLines)

        return importedLines
    }
}
